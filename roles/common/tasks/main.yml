- name: Setting dotfiles
  block:

  - name: clone dotfiles from github
    git:
      repo: 'ssh://git@github.com/rigarash/dotfiles.git'
      dest: '{{ ansible_env.HOME }}/.dotfiles'
      update: yes
      accept_hostkey: yes

  - name: check status of various configuration files
    stat:
      path: '{{ ansible_env.HOME }}/{{ item }}'
    with_items:
      - .gitconfig
      - .dircolors
      - .python_startup
      - .zsh.d
      - .zshrc
      - .tmux.conf
    register: conffiles

  - name: backup original various configuration files
    command: mv '{{ ansible_env.HOME }}/{{ item.item }}' '{{ ansible_env.HOME }}/{{ item.item }}.orig'
    args:
      creates: '{{ ansible_env.HOME }}/{{ item.item }}.orig'
      removes: '{{ ansible_env.HOME }}/{{ item.item }}'
    when:
      - item.stat is defined
      - item.stat.isreg is defined
      - item.stat.isreg
      - item.stat.islnk is defined
      - not item.stat.islnk
    with_items:
      - '{{ conffiles.results }}'

  - name: create symlinks of various configuration files
    file:
      src:  '{{ ansible_env.HOME }}/.dotfiles/{{ item }}'
      dest: '{{ ansible_env.HOME }}/{{ item }}'
      state: link
    with_items:
      - .gitconfig
      - .dircolors
      - .python_startup
      - .zsh.d
      - .zshrc
      - .tmux.conf
      - .aspell.conf

  - name: change .gitconfig on RICOS
    file:
      src:  '{{ ansible_env.HOME }}/.dotfiles/.gitconfig-ricos'
      dest: '{{ ansible_env.HOME }}/.gitconfig'
      state: link
    when:
      - "'ricos' in group_names"

  - name: change shell to zsh
    user:
      name: rigarash
      shell: /bin/zsh
    when:
      - "ansible_os_family == 'Debian'"

  - name: create folders for emacs
    file:
      path: '{{ ansible_env.HOME }}/.emacs.d'
      state: directory

  - name: create symlinks for emacs
    file:
      src:  '{{ ansible_env.HOME }}/.dotfiles/.emacs.d/{{ item }}'
      dest: '{{ ansible_env.HOME }}/.emacs.d/{{ item }}'
      state: link
    with_items:
      - init.el

  - name: create symlinks for mail
    file:
      src:  '{{ ansible_env.HOME }}/.dotfiles/{{ item }}'
      dest: '{{ ansible_env.HOME }}/{{ item }}'
      state: link
    with_items:
      - .signature.d
      - .msmtprc
      - .mutt

  - name: create symlinks for reportbug on Debian
    file:
      src:  '{{ ansible_env.HOME }}/.dotfiles/{{ item }}'
      dest: '{{ ansible_env.HOME }}/{{ item }}'
      state: link
    with_items:
      - .reportbugrc
    when:
      - "ansible_distribution == 'Debian'"

  become: false

- name: Setting for openssh
  block:

  - name: create folders for openssh
    file:
      path:  '{{ ansible_env.HOME }}/.ssh/{{ item }}'
      state: directory
    with_items:
      - socket
      - conf.d

  - name: check status of ssh configuration files
    stat:
      path: '{{ ansible_env.HOME }}/.ssh/{{ item }}'
    with_items:
      - config
      - authorized_keys
    register: ssh_conf

  - name: backup current ssh configuration files
    command: mv '{{ ansible_env.HOME }}/.ssh/{{ item.item }}' '{{ ansible_env.HOME }}/.ssh/{{ item.item }}.orig'
    args:
      creates: '{{ ansible_env.HOME }}/.ssh/{{ item.item }}.orig'
      removes: '{{ ansible_env.HOME }}/.ssh/{{ item.item }}'
    when:
      - item.stat is defined
      - item.stat.isreg is defined
      - item.stat.isreg
      - item.stat.islnk is defined
      - not item.stat.islnk
    with_items:
      - '{{ ssh_conf.results }}'

  - name: create symlinks of ssh configuration files
    file:
      src:  '{{ ansible_env.HOME }}/.dotfiles/.ssh/{{ item.item }}'
      dest: '{{ ansible_env.HOME }}/.ssh/{{ item.item }}'
      state: link
    with_items:
      - '{{ ssh_conf.results }}'

  - name: check status of ssh split configuration files
    find:
      paths: '{{ ansible_env.HOME }}/.dotfiles/.ssh/conf.d'
      patterns: '*.conf'
      recurse: no
    register: ssh_split_conf

  - name: create symlinks of ssh split configuration files
    file:
      src:  '{{ item }}'
      dest: '{{ ansible_env.HOME }}/.ssh/conf.d/{{ item | basename }}'
      state: link
    with_items:
      - '{{ ssh_split_conf.files | map(attribute="path") | list }}'

  - name: check openssh private keys
    stat:
      path: '{{ ansible_env.HOME }}/.ssh/{{ item }}'
    register: private_keys
    with_items:
      - id_rsa
      - id_rsa_v2
      - id_ecdsa

  - name: remove wrong openssh private keys
    file:
      path: '{{ item.stat.path }}'
      state: absent
      follow: no
    when:
      - item.stat is defined
      - item.stat.islnk is defined
      - item.stat.islnk
      - item.stat.lnk_source is not search( ansible_env.USERPROFILE + '/home/ssh_private/' + item.item )
    with_items:
      - '{{ private_keys.results }}'

  - name: setting up symlinks of openssh private keys
    file:
      src:  '{{ ansible_env.USERPROFILE }}/home/ssh_private/{{ item.item }}'
      dest: '{{ item.stat.path }}'
      state: link
    when:
      - item.stat.path is defined
    with_items:
      - '{{ private_keys.results }}'

  - name: fixing mode of .ssh/config
    file:
      path: '{{ ansible_env.HOME }}/.ssh/config'
      mode: '600'
      follow: yes

  - name: find location of gpg-agent socket
    command: /bin/zsh -c "gpgconf --list-dirs agent-socket"
    register: gpg_socket
    run_once: true

  - name: find location of gpg-agent ssh socket
    command: /bin/zsh -c "gpgconf --list-dirs agent-ssh-socket"
    register: gpg_ssh_socket
    run_once: true

  - name: Set location of GnuPG and ssh socket
    set_fact:
      gpgsocket: '{{ gpg_socket.stdout }}'
      sshsocket: '{{ gpg_ssh_socket.stdout }}'
      cacheable: true

  become: false
